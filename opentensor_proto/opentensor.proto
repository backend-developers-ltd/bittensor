syntax = "proto3";

service Opentensor {
	// Forward tensor request.
	rpc Fwd(FwdRequest) returns (FwdResponse) {}
	
	// Reverse tensor (gradient) request.
	rpc Bwd(BwdRequest) returns (BwdResponse) {}
}

message FwdRequest {
	// Protocol version: i.e. 1.0
	float version = 1;

	// Source identifier: (likely public key): 
	string source_id = 2;

	// Proof: message_id signed using source private key.
	bytes proof = 3;

	// Message Nounce: A random or incrementing digit.
	bytes nounce = 4;

	// Message identifier: A hash of concat(payload, nounce, source_id).
	bytes message_id = 5;

	// Message Payload: Raw encoded tensor bytes.
	bytes payload = 6;

	// TODO: optional tensor sizes.
	// TODO: optional public types.
}

message FwdResponse {
	// Protocol version: i.e. 1.0
	float version = 1;

	// Server identifier: (likely public key): 
	string server_id = 2;

	// Proof: message_id signed using server private key.
	bytes proof = 3;

	// Message Nounce: A random or incrementing digit.
	bytes nounce = 4;

	// Message identifier: A hash of concat(payload, nounce, server_id).
	bytes message_id = 5;

	// Message Payload: Raw encoded tensor bytes.
	bytes payload = 6;
}

// Backward pass gradients to server.
message BwdRequest {
	// Protocol version: i.e. 1.0
	float version = 1;

	// Source identifier: (likely public key): 
	string source_id = 2;

	// Proof: message_id signed using child private key.
	bytes proof = 3;

	// Message Nounce: A random or incrementing digit.
	bytes nounce = 4;

	// Message identifier: A hash of concat(payload, nounce, child_id).
	bytes message_id = 5;

	// Message Payload: Raw encoded tensor (gradients) bytes.
	bytes payload = 6;
}

// Reverse gradient call.
message BwdResponse {
	// Protocol version: i.e. 1.0
	float version = 1;

	// Boolean, Gradient accepted message.
  	bool accept = 2;
}
