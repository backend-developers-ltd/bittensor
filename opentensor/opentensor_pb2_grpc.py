# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from opentensor import opentensor_pb2 as opentensor_dot_opentensor__pb2


class OpentensorStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Fwd = channel.unary_unary(
        '/Opentensor/Fwd',
        request_serializer=opentensor_dot_opentensor__pb2.TensorMessage.SerializeToString,
        response_deserializer=opentensor_dot_opentensor__pb2.TensorMessage.FromString,
        )
    self.Bwd = channel.unary_unary(
        '/Opentensor/Bwd',
        request_serializer=opentensor_dot_opentensor__pb2.TensorMessage.SerializeToString,
        response_deserializer=opentensor_dot_opentensor__pb2.TensorMessage.FromString,
        )


class OpentensorServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Fwd(self, request, context):
    """Forward tensor request. 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Bwd(self, request, context):
    """Reverse tensor (gradient) request.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpentensorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Fwd': grpc.unary_unary_rpc_method_handler(
          servicer.Fwd,
          request_deserializer=opentensor_dot_opentensor__pb2.TensorMessage.FromString,
          response_serializer=opentensor_dot_opentensor__pb2.TensorMessage.SerializeToString,
      ),
      'Bwd': grpc.unary_unary_rpc_method_handler(
          servicer.Bwd,
          request_deserializer=opentensor_dot_opentensor__pb2.TensorMessage.FromString,
          response_serializer=opentensor_dot_opentensor__pb2.TensorMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Opentensor', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class MetagraphProxyStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Subscribe = channel.unary_unary(
        '/MetagraphProxy/Subscribe',
        request_serializer=opentensor_dot_opentensor__pb2.Neuron.SerializeToString,
        response_deserializer=opentensor_dot_opentensor__pb2.ACK.FromString,
        )
    self.Unsubscribe = channel.unary_unary(
        '/MetagraphProxy/Unsubscribe',
        request_serializer=opentensor_dot_opentensor__pb2.Neuron.SerializeToString,
        response_deserializer=opentensor_dot_opentensor__pb2.ACK.FromString,
        )
    self.GetMetagraph = channel.unary_unary(
        '/MetagraphProxy/GetMetagraph',
        request_serializer=opentensor_dot_opentensor__pb2.ACK.SerializeToString,
        response_deserializer=opentensor_dot_opentensor__pb2.Metagraph.FromString,
        )


class MetagraphProxyServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Unsubscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetMetagraph(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MetagraphProxyServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Subscribe': grpc.unary_unary_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=opentensor_dot_opentensor__pb2.Neuron.FromString,
          response_serializer=opentensor_dot_opentensor__pb2.ACK.SerializeToString,
      ),
      'Unsubscribe': grpc.unary_unary_rpc_method_handler(
          servicer.Unsubscribe,
          request_deserializer=opentensor_dot_opentensor__pb2.Neuron.FromString,
          response_serializer=opentensor_dot_opentensor__pb2.ACK.SerializeToString,
      ),
      'GetMetagraph': grpc.unary_unary_rpc_method_handler(
          servicer.GetMetagraph,
          request_deserializer=opentensor_dot_opentensor__pb2.ACK.FromString,
          response_serializer=opentensor_dot_opentensor__pb2.Metagraph.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'MetagraphProxy', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
