syntax = "proto3";

// Runtime protocol definition.
service Opentensor {
	// Forward tensor request. 
	rpc Fwd(TensorMessage) returns (TensorMessage) {}
	
	// Reverse tensor (gradient) request.
	rpc Bwd(TensorMessage) returns (TensorMessage) {}
}

// DTH + Blockchain interface.
service MetagraphProxy {
	rpc Subscribe(Neuron) returns (ACK) {}
	rpc Unsubscribe(Neuron) returns (ACK) {}
	rpc GetMetagraph(ACK) returns (Metagraph) {}
}

// Bool acknowledgment.
message ACK {
	bool ack = 1;
}	

// Full graph definition.
message Metagraph {
	float version = 1;
	repeated Neuron neurons = 2;
}

message Neuron {
	float version = 1;
	string public_key = 2;
	float rank = 3;
	float stake = 4;	
	float incentive = 5;
	repeated Weight weights = 6;
	repeated Node nodes = 7;
}

message Node {
	float version = 1;
	string public_key = 2;
	string identity = 3;
	string address = 4;
	string port = 5;
	string definition = 6;
	TensorDef indef = 7;
	TensorDef outdef = 8;
}	

message Weight {
	float version = 1;
	string source = 2; // Source neuron public key
	string target = 3; // Target neuron public key.
	float value = 4;
}

// Proto for a opentensor.
message TensorMessage {
	// version: protocol version 
	// i.e. 1.0
	float version = 1;

	// sender_id: raw bytes representation of the source's ed25519 public key.
	// i.e. b'4c598ff31b68eb6c458c2dc51b25367fa213c566088077f46d93156148429d78'
  	// $ python 
	// >> from cryptography.hazmat.primitives.asymmetric.ed25519 import Ed25519PrivateKey
	// >> from cryptography.hazmat.primitives import serialization
	// >> private = Ed25519PrivateKey.generate()
	// >> public = private.public_key()
	// source_id = '0x%s' % public.public_bytes(serialization.Encoding.Raw, serialization.PublicFormat.Raw).hex()
	string public_key = 2;

	// source_id: id of source node. Usually unused by target.
	string source_id = 3;

	// target_key: raw bytes representation of the target's ed25519 public key
	// Note that clients and experts both have ed25519 public keys. So the response tensor message
	// should simply have these two keys swapped.
	string target_id = 4;

	// nounce: random bytes to identify this message.
	// >> nounce = os.urandom(12)
	bytes nounce = 5;

	// signature: digital signature linking the nounce and source_key
	// prevents spoofing attacks where an adversary attempts to send messages as other peers.
	// $ python
	// >>> from cryptography.hazmat.backends import default_backend
	// >>> from cryptography.hazmat.primitives import hashes
	// >>> digest = hashes.Hash(hashes.SHA1(), backend=default_backend())
	// >>> digest.update(public_key.encode('utf-8'))
	// >>> digest.update(nounce)
	// >>> digest = digest.finalize()
	// >>> source_key.verify(msg.signature, digest)
	bytes signature = 6;

	// tensor: 0 or more tensors passed on the wire.
	repeated Tensor tensors = 7;
}

message Tensor {
	// Tensor content: Serialized raw tensor content. This representation
  	// can be used for all tensor types. The purpose of this representation is to
  	// reduce serialization overhead during RPC call by avoiding serialization of
  	// many repeated small items. In other words, we just copy the bytes and let
	// the application layer serialize and deserialize the bytes. 
	// 1. opentensor.serialize(numpy_array) --> buffer
	// 2. opentensor.deserialize(bytes_content) --> numpy_array    	
	bytes buffer = 1;

	// Shape and type
	TensorDef tensor_def = 2;
}

message TensorDef {	
	// shape: the shape of this tensor.
	// i.e. [256, 724]
	repeated int64 shape = 2;
    	
	// dtype: the tensor datatype.	
	DataType dtype = 4;
}

enum DataType {
  DT_FLOAT32 = 0;
  DT_FLOAT64 = 1;
  DT_INT32 = 2;
  DT_INT64 = 3;
  UNKNOWN = 4;
}

